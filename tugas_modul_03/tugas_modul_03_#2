class Employee:
    def __init__(self, name, role, hours_worked, task_completed):
        self.name = name
        self.role = role
        self.hours_worked = hours_worked
        self.task_completed = task_completed
    
    def work(self):
        pass
    
    def evaluate_performance(self):
        efficiency = self.task_completed / self.hours_worked if self.hours_worked > 0 else 0
        if efficiency > 1:
            return "High Performance"
        elif efficiency > 0.5:
            return "Medium Performance"
        else:
            return "Low Performance"
    
    def show_performance(self):
        print(f"{self.name} ({self.role}) is {self.work()}.")
        print(f"Performance Rating: {self.evaluate_performance()}\n")

class SoftwareEngineer(Employee):
    def __init__(self, name, hours_worked, task_completed):
        super().__init__(name, "Software Engineer", hours_worked, task_completed)
    
    def work(self):
        return "coding"

class DataScientist(Employee):
    def __init__(self, name, hours_worked, task_completed):
        super().__init__(name, "Data Scientist", hours_worked, task_completed)
    
    def work(self):
        return "analyzing data"

class ProductManager(Employee):
    def __init__(self, name, hours_worked, task_completed):
        super().__init__(name, "Product Manager", hours_worked, task_completed)
    
    def work(self):
        return "managing the product roadmap"

if __name__ == "__main__":
    employees = [
        SoftwareEngineer("Lucy", 40, 50),
        DataScientist("Ripperdoc", 40, 30),
        ProductManager("Maine", 35, 25),
        SoftwareEngineer("David", 40, 20)
    ]
    
    for employee in employees:
        employee.show_performance()
